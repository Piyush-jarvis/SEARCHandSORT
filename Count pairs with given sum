// { Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function template for C++

class Solution{   
public:
    int getPairsCount(int arr[], int n, int k) {
        // code here
        int count = 0;
        unordered_map<int, int> m;
        for(int i = 0; i < n; i++)
        {
            m[arr[i]]++;//map me array ke ithg position ki frequency badha raha h 
        }
        
        for(int i = 0; i < n; i++)
        {
            count += m[k - arr[i]];
            
            if(k - arr[i] == arr[i])
            {
                count--;
            }
        }
        return count/2;
      //The map::find() is a built-in function in C++ 
            // STL which returns an iterator or a constant iterator that refers to the position
            // where the key is present in the map. If the key is not present in the map container
            // , it returns an iterator or a constant iterator which refers to map.end()
        }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.getPairsCount(arr, n, k);
        cout << ans << "\n";
    }
    
    return 0;
}  // } Driver Code Ends














#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function template for C++

class Solution{   
public:
    int getPairsCount(int arr[], int n, int k) {
        // code here
        int count = 0;
        unordered_map<int,int> mp;
        for(int i =0; i<n;i++)
        {
            int temp = k-arr[i];
            if(mp[temp])
            count += mp[temp];
            mp[arr[i]]++;
        }
    
        return count;
    }
    
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.getPairsCount(arr, n, k);
        cout << ans << "\n";
    }
    
    return 0;
}  // } Driver Code Ends
