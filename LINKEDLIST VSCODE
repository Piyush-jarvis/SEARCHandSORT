#include<iostream>
#include<map>
#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
//constructor
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
//destructor
    ~Node()

    {
        int value = this->data;
        if(this->next != NULL)
        {
            delete next;
            this->next = NULL;
        }
        cout <<"Memory is free for Node with Data: " << value << endl;
    }
};
            // =============================INSERTION===============================
            // =============================INSERTION===============================
            // =============================INSERTION===============================
                                    /*INSERTION AT BEGINNING*/
    void insertatstart(Node* &start, int d)//this requires only one pointer whereas @position, @end needs 2 pointers newnode, temp
    {
        Node* temp = new Node(d);
        if(start==NULL)
            start=temp;
        else
            {
            temp->next=start;
            start=temp;
            } 
    }
                                    /*INSERTION AT END*/
    void insertatend(Node* &start, int d)
    {
        Node* newnode = new Node(d);
        Node* temp;
        if(start == NULL)
            start= newnode;
        else
            {
                temp = start;
                while (temp->next != NULL)
                {
                   temp = temp->next;
                }
                temp ->next = newnode;
            } 
    }
                                    /*INSERTION AT POS*/
    void insertatposition(Node* &start, int position, int d)
    {
        Node* newnode = new Node(d);
        Node* temp;
        int i = 1;
        if(position < 1)
        {
            cout << "Please enter a valid position it should be >= 1."<<endl;
            return;
        }
        else if (position == 1)
        {
            newnode ->next = start;
            start = newnode;
        }
        else
        {
            temp = start;
            while (i < position -1)
            {
                temp = temp->next;
                i++;
            }
            newnode->next = temp->next;
            temp->next = newnode;
        }
    }
                                    /*DELETION AT BEGINNING*/
    void deleteatstart(Node* &start)//this requires only one pointer whereas @position, @end needs 2 pointers newnode, temp
    {
        Node* temp;
        if(start==NULL)
            cout << "There is nothing to delete as your LL is empty." << endl;
        else
            {
                temp = start;
                start = temp->next;
                temp->next = NULL;
                delete temp;
            } 
    }
                                    /*DELETION AT END*/
    void deleteatend(Node* &start)//this requires only one pointer whereas @position, @end needs 2 pointers newnode, temp
    {
        Node* temp;
        if(start==NULL)
            cout << "There is nothing to delete as your LL is empty." << endl;
        else
            {
                temp = start;
                while (temp ->next ->next != NULL)
                {
                    temp = temp->next;
                }
               temp->next = NULL;
            //    delete temp;
            } 
    }
                                    /*DELETION AT POS*/
    void deleteatposition(Node* &start, int position)
    {
        Node* temp, *prev =NULL;
        int i = 1;
        if(position < 1)
        {
            cout << "Please enter a valid position it should be >= 1."<<endl;
            return;
        }
        else if (position == 1)
        {
            start = start->next;
        }
        else
        {
            temp = start;
            while (i < position -1)
            {   
                prev = temp;
                temp = temp->next;
                i++;
            }
            prev->next = temp->next;
            temp->next = NULL;
            delete temp;
        }
    }
                                    /*TRAVERSAL OF LINKED LIST*/
    void printd(Node* &start)
    {
        Node* temp = start;
        int i = 1;
        if(start == NULL)
        {
            cout << "You have no elements in linked list."<<endl;
        }
        else
        {
            while (temp != NULL)
            {
                cout << i <<"==>" <<temp ->data <<"\t";
                temp = temp->next;
                i++;
            }
             cout << "--> NULL ::::\n" << endl;
        }        
    }





int main(){
    Node* node1 = new Node(10);
    Node* start = node1;

    cout << "Example Of INSERTION in linked list:" << endl;
    insertatstart(start,12);
    insertatstart(start,15);
    insertatend(start,18);
    insertatend(start,21);
    insertatposition(start,1,01);
    insertatposition(start,4,04);
    printd(start);
    cout<<"delete at start:"<<endl;
    deleteatstart(start);
    printd(start);
    cout<<"delete at end:"<<endl;
    deleteatend(start);
    printd(start);
    cout<<"delete at position:"<<endl;
    deleteatposition(start,4);
    printd(start);
    cout << "the start is: " << start->data << endl;
    // cout << "the end is: " << end->data << endl;

    return 0;
}
