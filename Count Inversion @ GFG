// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int merge(long long arr[], long long s, long long e){
       long long int inv = 0;
       long long mid = s + (e-s)/2;
       long long lenLeft = mid - s + 1;
       long long lenRight = e - mid;
       
       long long *first = new long long[lenLeft];
       long long *second = new long long[lenRight];
       long long mainArrayIndex = s;
       for(long long i=0;i<lenLeft;i++){
           first[i] = arr[mainArrayIndex++];
       }
       
       mainArrayIndex = mid+ 1;
       for(long long i=0;i<lenRight;i++){
           second[i] = arr[mainArrayIndex++];
       }
       
       long long i=0;
       long long j=0;
       mainArrayIndex = s;
       
       while(i<lenLeft && j<lenRight){
           if(first[i]<=second[j]){
               arr[mainArrayIndex++] = first[i++];
           }
           else{
               arr[mainArrayIndex++] = second[j++];
               inv += lenLeft - i;
           }
       }
       
       while(i<lenLeft){
           arr[mainArrayIndex++]=first[i++];
       }
       
       while(j<lenRight){
           arr[mainArrayIndex++]=second[j++];
       }
       
       delete []first;
       delete []second;
       return inv;
   }
   
   
   
   long long int mergeSort(long long arr[], long long s, long long e){
       long long int inv=0;
       if(s>=e){
           return inv;
       }
       
       long long mid = s + (e-s)/2;
       inv += mergeSort(arr, s, mid);
       inv += mergeSort(arr, mid+1, e);
       
       inv += merge(arr, s, e);
       
       return inv;
   }
   
   
   
   
   long long int inversionCount(long long arr[], long long N)
   {
       long long int inv = mergeSort(arr, 0, N-1);
       return inv;
   }

};

// { Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}
  // } Driver Code Ends
